<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://www.plcopen.org/xml/tc6_0200">
  <fileHeader companyName="Delta Electronics, Inc." productName="DIADesigner-AX" productVersion="DIADesigner-AX 1.3" creationDateTime="2022-10-31T17:55:14.2518192" />
  <contentHeader name="SpindleLib" version="3.5.15.30" modificationDateTime="2022-10-31T17:55:03.7168032" organization="Induprogress" author="Piotr Gliszczyński">
    <Comment>This Library allows to control spindles with simple FB. If you need to add another spindle option - just extend SpindleManager</Comment>
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1" />
      </fbd>
      <ld>
        <scaling x="1" y="1" />
      </ld>
      <sfc>
        <scaling x="1" y="1" />
      </sfc>
    </coordinateInfo>
    <addData>
      <data name="http://www.3s-software.com/plcopenxml/projectinformation" handleUnknown="implementation">
        <ProjectInformation>
          <property name="Author" type="string">Piotr Gliszczyński</property>
          <property name="AutoResolveUnbound" type="boolean">true</property>
          <property name="Company" type="string">Induprogress</property>
          <property name="CompiledLibraryCompatibilityVersion" type="string">DIADesigner-AX 1.3</property>
          <property name="DefaultNamespace" type="string">SpindleLib</property>
          <property name="Description" type="string">This Library allows to control spindles with simple FB. If you need to add another spindle option - just extend SpindleManager</property>
          <property name="DocFormat" type="string">reStructuredText</property>
          <property name="IsEndUserLibrary" type="boolean">false</property>
          <property name="LanguageModelAttribute" type="string">qualified-access-only</property>
          <property name="Placeholder" type="string">PlaceholderTemplate</property>
          <property name="Project" type="string">SpindleLibrary</property>
          <property name="Released" type="boolean">false</property>
          <property name="SourceLibrary" type="boolean">false</property>
          <property name="Title" type="string">SpindleLib</property>
          <property name="Version" type="version">3.5.15.30</property>
          <property name="library-category-list" type="library-category-list" />
        </ProjectInformation>
      </data>
    </addData>
  </contentHeader>
  <types>
    <dataTypes>
      <dataType name="SpindleMaganerStatus_e">
        <baseType>
          <enum>
            <values>
              <value name="INIT" value="0" />
              <value name="STANDBY" />
              <value name="POWER_ON" />
              <value name="WORKING_CW" />
              <value name="WORKING_CCW" />
              <value name="STOPPING" />
              <value name="ERROR" />
              <value name="DEFAULT" value="9999" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>fdd32703-eb1d-4c4b-aa9b-533f668acbcb</ObjectId>
          </data>
        </addData>
      </dataType>
    </dataTypes>
    <pous>
      <pou name="AnalogSpindle" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="i_driveInError">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">feedback signals from drive</xhtml>
              </documentation>
            </variable>
            <variable name="i_drivePowerON">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="i_driveStopped">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="i_driveTargetReached">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="i_driveActualVelocity">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="q_driveReset">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">signals sent to drive</xhtml>
              </documentation>
            </variable>
            <variable name="q_driveEnable">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Power stage enable or servo ON</xhtml>
              </documentation>
            </variable>
            <variable name="q_driveAnalogCommand">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">analog rotating command. By default is sait to be signed, if unsigned command necessary extend and ovverride this class.</xhtml>
              </documentation>
            </variable>
          </outputVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>SpindleManager</Extends>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Class that enables to create objects - analog controlled spindles. Class extends general abstract implementation of spindles, with analog handling. 
* Class requires several additional signals from the drive - drive in error status, drive in power on status, drive stopped, drive target reached and actual veclity read from drive
* Similarly, additional signals will be necesary to implement as outputs - drive reset, drive enable and obviously, drive analog signal.
*
* Class directly follows abstract class logic, if any override occurs - see description near override. Class implements Error and Motion interfaces.
* Ramps interface is not necessary, since no ramps can be changed without communication. Ramps are set as constant in drive.
*
* Extend this block if any different behaviour is necessary
</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^( i_runCW := THIS^.i_runCW,
		i_runCCW := THIS^.i_runCCW,
		i_reset := THIS^.i_reset,
		i_targetVelocity := THIS^.i_targetVelocity,
		q_actualVelocity =&gt; THIS^.q_actualVelocity,
		q_error =&gt; THIS^.q_error,
		q_spindleStopped =&gt; THIS^.q_spindleStopped,
		q_spindleTargetReached =&gt; THIS^.q_spindleTargetReached);</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="errorReset" ObjectId="4c45ac57-8867-45ba-b93f-2cb214b4ff31">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Analog spindle class method, handles error resets. IF called - outputs specific error reset output signal to the drive
* When error is succesfully reset - returns TRUE.
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.q_driveReset := isError;
IF NOT isError THEN
	errorReset := TRUE;
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="setPowerOn" ObjectId="52300e2d-c6b4-4d24-b6f3-ec1a784af627">
              <interface>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Analog spindle implementation of motion interface - enables output which handlesc drive power stage control 
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.q_driveEnable := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="runSpindle" ObjectId="aba2bb6a-d5d4-4ac4-ad0e-f0e5754b6af9">
              <interface>
                <inputVars>
                  <variable name="i_setVelocity">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Analog spindle implementation of motion interface method, handles running spindle.
* Sets commadn to analog output and assumes signed analog output, if such implementation is not proper - override this method.
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.q_driveAnalogCommand := i_setVelocity;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="stopSpindle" ObjectId="5c5a89c3-b037-4026-9ab5-ca7b4c2267a0">
              <interface>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Analog spindle implementation of motion interface, handles stopping spindle by reseting (to 0) analog command
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.q_driveAnalogCommand := 0;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="setPowerOff" ObjectId="aa280ff4-0896-4edd-adf4-66b219bf2ef5">
              <interface>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Analog spindle implementation of motion interface - disables output which handlesc drive power stage control 
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.q_driveEnable := FALSE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="update" ObjectId="f0d9947b-4fbb-4cc4-a5c0-37bbcbdc6adf">
              <interface>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                    <AccessModifiers Protected="true" />
                  </data>
                </addData>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Overridden update method of spindle manager class. Override handles actual velocity output.
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.update();
THIS^.q_actualVelocity := THIS^.i_driveActualVelocity;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
            <Property name="isError" ObjectId="91da8d3f-395f-407d-a40c-7c7ee066fe17">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Analog spindle class method, handles reading error input from the drive - if it's true - drive is in error
</xhtml>
                </documentation>
              </interface>
              <GetAccessor>
                <interface />
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">isError := THIS^.i_driveInError;</xhtml>
                  </ST>
                </body>
                <addData />
              </GetAccessor>
              <addData />
            </Property>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
            <Property name="isPowerOn" ObjectId="256c28d3-fce5-4145-8014-8183b5b90b60">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Analog spindle implementation of motion interface - checks input feedback from drive with powerON feedback
</xhtml>
                </documentation>
              </interface>
              <GetAccessor>
                <interface />
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">isPowerOn := THIS^.i_drivePowerON;</xhtml>
                  </ST>
                </body>
                <addData />
              </GetAccessor>
              <addData />
            </Property>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
            <Property name="isSpindleStopped" ObjectId="1f638665-ba1e-4c52-8d8f-f59eeb4a81e8">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Analog spindle implementation of motion interface - checks input feedback from drive with spindle stopped feedback
</xhtml>
                </documentation>
              </interface>
              <GetAccessor>
                <interface />
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">isSpindleStopped := THIS^.i_driveStopped;</xhtml>
                  </ST>
                </body>
                <addData />
              </GetAccessor>
              <addData />
            </Property>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
            <Property name="isSpindleTargetReached" ObjectId="2e54a297-7a82-4ff6-8957-ba66aeebbcae">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Analog spindle implementation of motion interface - checks input feedback from drive with target reacehd feedback
</xhtml>
                </documentation>
              </interface>
              <GetAccessor>
                <interface />
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">isSpindleTargetReached := THIS^.i_driveTargetReached;</xhtml>
                  </ST>
                </body>
                <addData />
              </GetAccessor>
              <addData />
            </Property>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>eb76969c-c174-4116-a74f-1f579b1c095f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DeltaModbusSpindle" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="i_warnErrorCode">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">2100h</xhtml>
              </documentation>
            </variable>
            <variable name="i_statusWord">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">2101h</xhtml>
              </documentation>
            </variable>
            <variable name="i_outputFrequency">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">2102h</xhtml>
              </documentation>
            </variable>
            <variable name="i_accRamp">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="Constants.DEFAULT_RAMP_TIME" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">input by user in s</xhtml>
              </documentation>
            </variable>
            <variable name="i_dccRamp">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="Constants.DEFAULT_RAMP_TIME" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">input by user in s</xhtml>
              </documentation>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="q_controlWord">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">2000h</xhtml>
              </documentation>
            </variable>
            <variable name="q_frequencyCommand">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">2001h</xhtml>
              </documentation>
            </variable>
            <variable name="q_driveReset">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">2002.1h</xhtml>
              </documentation>
            </variable>
            <variable name="q_accRamp">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">01-12 = 010Ch</xhtml>
              </documentation>
            </variable>
            <variable name="q_dccRamp">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">01-13 = 010Dh</xhtml>
              </documentation>
            </variable>
          </outputVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>SpindleManager</Extends>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Class that enables to create objects - modbus controlled spindles. Class extends general abstract implementation of spindles, with modbus communication handling. 
* Class requires several communication parameters to be read and mapped as inputs and outputs to the object.
*
* Class directly follows abstract class logic, if any override occurs - see description near override. Class implements Error, Motion and Ramps interfaces.
* Ramps are imputs to the object by the user. Default implementation is necessary, since ramps cannot be 0.
* 
* Any Delta Electronics VFD drive can be controlled with this block since modbus parameters are similar or the same in all models. Remember to set 00-20, 0-21
* and communication parameters in the drive
*
* Extend this block if any different behaviour is necessary
</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^( i_runCW := THIS^.i_runCW,
		i_runCCW := THIS^.i_runCCW,
		i_reset := THIS^.i_reset,
		i_targetVelocity := THIS^.i_targetVelocity,
		q_actualVelocity =&gt; THIS^.q_actualVelocity,
		q_error =&gt; THIS^.q_error,
		q_spindleStopped =&gt; THIS^.q_spindleStopped,
		q_spindleTargetReached =&gt; THIS^.q_spindleTargetReached);</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="errorReset" ObjectId="d7979cfb-c388-4f5e-8e98-047772426137">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Modbus spindle method implementation of error interface - handles error reset, by enabling error reset output.
* If reset succeeds returns TRUE
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.q_driveReset := isError;
IF NOT isError THEN
	errorReset := TRUE;
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="writeRamps" ObjectId="46c0ac0a-6452-4fbd-b44f-da1af849b7ae">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Modbus spindle ramps interface method implementation - handles sending ramps to drive.
*
* Since ramps in drive are scaled to 0.01s (1 = 0.01s) additional scaling was necessary and conversion from real to INT/UINT
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">q_accRamp := TO_UINT(i_accRamp * 100);
q_dccRamp := TO_UINT(i_dccRamp * 100);
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="rampsWasChanged" ObjectId="069f48b2-1ec5-4c8e-8ef1-c6cefc8ebd0a">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Modbus spindle ramps interface method implementation - handles checks if ramps set by user was changed, form what was sent to the drive
* If input ramps are different, than output ramps - the user have changed ramp times and method returns TRUE
*
* Output ramps are integers with scaling 0.01s (1 = 0.01s), so additional scaling was necessary.
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">rampsWasChanged := (i_accRamp &lt;&gt; TO_REAL(q_accRamp)/100) OR (i_dccRamp &lt;&gt; TO_REAL(q_accRamp)/100);</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="setPowerOn" ObjectId="0f8a25f2-8955-4e1d-8197-ba258f7af758">
              <interface>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Modbus spindle motion interface method implementation - starts the drive via specific controlwrod bits.
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.q_controlWord.0 := FALSE;
THIS^.q_controlWord.1 := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="runSpindle" ObjectId="a587d9a3-d206-409c-9ff5-d32d8c4aa1b1">
              <interface>
                <inputVars>
                  <variable name="i_setVelocity">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Modbus spindle motion interface method implementation, handles running of the drive
*  - sending frequency command and selecting right rotation dricetion based on set vecloty
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF i_setVelocity &gt;= 0 THEN
	THIS^.q_controlWord.4 := TRUE;
	THIS^.q_controlWord.5 := FALSE;
	THIS^.q_frequencyCommand := i_setVelocity;
ELSE
	THIS^.q_controlWord.4 := FALSE;
	THIS^.q_controlWord.5 := TRUE;
	THIS^.q_frequencyCommand := -i_setVelocity;
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="stopSpindle" ObjectId="6591b9e4-b6d9-4b1c-aaab-ee24b3f5ca8e">
              <interface>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Modbus spindle motion interface method implementation - stopps rotation of the spindle. Handled by 0 speed command.
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.q_frequencyCommand := 0;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="setPowerOff" ObjectId="99904ff6-347a-4397-bda8-33c8cd0184a3">
              <interface>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Modbus spindle motion interface method implementation - stoppes the drive via specific controlwrod bits.
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.q_controlWord.0 := TRUE;
THIS^.q_controlWord.1 := FALSE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="update" ObjectId="b91aa904-44c4-4671-b23d-285d02b81b35">
              <interface>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                    <AccessModifiers Protected="true" />
                  </data>
                </addData>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Overridden update method of spindle manager class. Override handles actual velocity output.
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.update();
THIS^.q_actualVelocity := THIS^.i_outputFrequency;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
            <Property name="isError" ObjectId="3b762ad4-6799-4239-97c9-a0d8b929eccb">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Modbus spindle error interface property implementation - checks if drive reports any warn or error codes. If yes, then returns TRUE.
</xhtml>
                </documentation>
              </interface>
              <GetAccessor>
                <interface />
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">IF THIS^.i_warnErrorCode &lt;&gt; 0 THEN
	isError := TRUE;
ELSE
	isError := FALSE;
END_IF</xhtml>
                  </ST>
                </body>
                <addData />
              </GetAccessor>
              <addData />
            </Property>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
            <Property name="isPowerOn" ObjectId="70ae6658-2548-41fd-bbac-84f8c4cf4b7a">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Modbus spindle motion interface property implementation - checks if any of the first two bits of control word is TRUE.
* Returns true if yes - drive is in power ON state
</xhtml>
                </documentation>
              </interface>
              <GetAccessor>
                <interface />
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">isPowerOn := (THIS^.i_statusWord.1 OR THIS^.i_statusWord.0);</xhtml>
                  </ST>
                </body>
                <addData />
              </GetAccessor>
              <addData />
            </Property>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
            <Property name="isSpindleStopped" ObjectId="8504e3c4-8d9a-4140-8793-aa64cf83ba55">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Modbus spindle motion interface property implementation - checks if output frequency is 0 - if yesthe drive is stopped and returns TRUE
</xhtml>
                </documentation>
              </interface>
              <GetAccessor>
                <interface />
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">isSpindleStopped := (THIS^.i_outputFrequency = 0);</xhtml>
                  </ST>
                </body>
                <addData />
              </GetAccessor>
              <addData />
            </Property>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
            <Property name="isSpindleTargetReached" ObjectId="edacb644-5f10-4fe2-a4cc-0c5f296acdb8">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Modbus spindle motion interface property implementation - handles checks of spindle target reached.
* Checks if drive reports operating state and then checks if output frequency equals set frequency
* Output frequency has 1.00Hz deadband implemented in checks
</xhtml>
                </documentation>
              </interface>
              <GetAccessor>
                <interface />
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">isSpindleTargetReached := (THIS^.i_statusWord.0 AND THIS^.i_statusWord.1) AND 
(THIS^.i_outputFrequency &lt;= THIS^.q_frequencyCommand + 100 OR THIS^.i_outputFrequency &gt;= THIS^.q_frequencyCommand - 100);</xhtml>
                  </ST>
                </body>
                <addData />
              </GetAccessor>
              <addData />
            </Property>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4b3835e6-75fc-4380-b373-2ae5a4dc52fa</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="EthercatSpindle" pouType="functionBlock">
        <interface>
          <inOutVars>
            <variable name="i_drive">
              <type>
                <derived name="ETCSlave" />
              </type>
            </variable>
          </inOutVars>
          <inputVars>
            <variable name="i_statusWord">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="i_actualVelocity">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="i_accTime">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="Constants.DEFAULT_RAMP_TIME" />
              </initialValue>
            </variable>
            <variable name="i_dccTime">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="Constants.DEFAULT_RAMP_TIME" />
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="q_controlWord">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="q_targetVelocity">
              <type>
                <INT />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="OperationalDelay">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="ReadAccRamp">
              <type>
                <derived name="ETC_CO_SdoRead" />
              </type>
              <initialValue>
                <structValue>
                  <value member="wIndex">
                    <simpleValue value="16#3001" />
                  </value>
                  <value member="bySubindex">
                    <simpleValue value="16#D" />
                  </value>
                  <value member="pBuffer">
                    <simpleValue value="ADR(accTimeRead)" />
                  </value>
                  <value member="szSize">
                    <simpleValue value="SIZEOF(accTimeRead)" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
            <variable name="ReadDccRamp">
              <type>
                <derived name="ETC_CO_SdoRead" />
              </type>
              <initialValue>
                <structValue>
                  <value member="wIndex">
                    <simpleValue value="16#3001" />
                  </value>
                  <value member="bySubindex">
                    <simpleValue value="16#E" />
                  </value>
                  <value member="pBuffer">
                    <simpleValue value="ADR(dccTimeRead)" />
                  </value>
                  <value member="szSize">
                    <simpleValue value="SIZEOF(dccTimeRead)" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
            <variable name="accTimeRead">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="dccTimeRead">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="WriteAccRamp">
              <type>
                <derived name="ETC_CO_SdoWrite" />
              </type>
              <initialValue>
                <structValue>
                  <value member="wIndex">
                    <simpleValue value="16#604F" />
                  </value>
                  <value member="bySubindex">
                    <simpleValue value="16#0" />
                  </value>
                  <value member="pBuffer">
                    <simpleValue value="ADR(accRamp)" />
                  </value>
                  <value member="szSize">
                    <simpleValue value="SIZEOF(accRamp)" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
            <variable name="WriteDccRamp">
              <type>
                <derived name="ETC_CO_SdoWrite" />
              </type>
              <initialValue>
                <structValue>
                  <value member="wIndex">
                    <simpleValue value="16#6050" />
                  </value>
                  <value member="bySubindex">
                    <simpleValue value="16#0" />
                  </value>
                  <value member="pBuffer">
                    <simpleValue value="ADR(dccRamp)" />
                  </value>
                  <value member="szSize">
                    <simpleValue value="SIZEOF(dccRamp)" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
            <variable name="accRamp">
              <type>
                <DINT />
              </type>
            </variable>
            <variable name="dccRamp">
              <type>
                <DINT />
              </type>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>SpindleManager</Extends>
              </Inheritance>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF OperationalDelay.Q THEN
	SUPER^( i_runCW := THIS^.i_runCW,
			i_runCCW := THIS^.i_runCCW,
			i_reset := THIS^.i_reset,
			i_targetVelocity := THIS^.i_targetVelocity,
			q_actualVelocity =&gt; THIS^.q_actualVelocity,
			q_error =&gt; THIS^.q_error,
			q_spindleStopped =&gt; THIS^.q_spindleStopped,
			q_spindleTargetReached =&gt; THIS^.q_spindleTargetReached);
END_IF;

OperationalDelay(IN:= (i_drive.wState = ETCStack.ETC_SLAVE_STATE.ETC_SLAVE_OPERATIONAL), PT:= T#1S);

ReadAccRamp(
	usiCom:= 1, 
	uiDevice:= THIS^.i_drive.PhysSlaveAddr, 
	usiChannel:= 1,
	udiTimeOut := 100);

ReadDccRamp(
	usiCom:= 1, 
	uiDevice:= THIS^.i_drive.PhysSlaveAddr, 
	usiChannel:= 1,
	udiTimeOut := 100);
	
WriteAccRamp(
	usiCom:= 1, 
	uiDevice:= THIS^.i_drive.PhysSlaveAddr, 
	usiChannel:= 1, 
	udiTimeOut:= 100 );
	
WriteDccRamp(
	usiCom:= 1, 
	uiDevice:= THIS^.i_drive.PhysSlaveAddr, 
	usiChannel:= 1, 
	udiTimeOut:= 100 );</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="errorReset" ObjectId="aaa21ad0-ef17-40c0-bde6-9103ccb7360b">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.q_controlWord.7 := isError;
IF NOT isError THEN
	errorReset := TRUE;
END_IF </xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="writeRamps" ObjectId="b17786e6-4f82-4deb-a282-1f13cd1af3f8">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.accRamp := TO_DINT(1000 * THIS^.i_accTime);
THIS^.dccRamp := TO_DINT(1000 * THIS^.i_dccTime);

THIS^.WriteAccRamp.xExecute := TRUE;

IF THIS^.WriteDccRamp.xDone OR THIS^.WriteDccRamp.xError OR THIS^.WriteAccRamp.xError THEN
	THIS^.WriteAccRamp.xExecute := FALSE;
	THIS^.WriteDccRamp.xExecute := FALSE;
END_IF

IF THIS^.WriteAccRamp.xDone THEN
	THIS^.WriteDccRamp.xExecute := TRUE;
END_IF

IF THIS^.WriteDccRamp.xExecute THEN
	writeRamps := TRUE;
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="rampsWasChanged" ObjectId="3e8f1ea3-df92-4f8a-a87f-c24eb145e9a2">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.ReadAccRamp.xExecute := TRUE;

IF THIS^.ReadAccRamp.xExecute AND THIS^.ReadAccRamp.xDone THEN
	IF TO_INT(THIS^.i_accTime*100) &lt;&gt; accTimeRead THEN
		rampsWasChanged := TRUE;
		THIS^.ReadAccRamp.xExecute := FALSE;
	ELSE
		THIS^.ReadDccRamp.xExecute := TRUE;
	END_IF
END_IF

IF THIS^.ReadDccRamp.xExecute AND THIS^.ReadDccRamp.xDone THEN
	IF TO_INT(THIS^.i_dccTime*100) &lt;&gt; dccTimeRead THEN
		rampsWasChanged := TRUE;
	ELSE
		rampsWasChanged := FALSE;
	END_IF
END_IF

IF THIS^.ReadDccRamp.xDone OR THIS^.ReadDccRamp.xError OR THIS^.ReadAccRamp.xError THEN
	THIS^.ReadAccRamp.xExecute := FALSE;
	THIS^.ReadDccRamp.xExecute := FALSE;
END_IF
	

</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="setPowerOn" ObjectId="529b81be-4975-444e-8fe8-07985fd3e0f7">
              <interface />
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.q_controlWord.0 := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="runSpindle" ObjectId="a7050d44-24da-48af-8bf4-a94604df645c">
              <interface>
                <inputVars>
                  <variable name="i_setVelocity">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.q_targetVelocity := i_setVelocity;
THIS^.q_controlWord.4 := TRUE;
THIS^.q_controlWord.5 := TRUE;
THIS^.q_controlWord.6 := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="stopSpindle" ObjectId="b958b4c8-bdff-49e3-af12-9f55c52c404a">
              <interface />
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.q_targetVelocity := 0;
THIS^.q_controlWord.4 := FALSE;
THIS^.q_controlWord.5 := FALSE;
THIS^.q_controlWord.6 := FALSE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="setPowerOff" ObjectId="d7ad8290-07d4-4953-b7ec-99f6326f0330">
              <interface />
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.q_controlWord.0 := FALSE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="update" ObjectId="d957cbb8-a86d-4d34-93fd-ab1f042e0989">
              <interface>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                    <AccessModifiers Protected="true" />
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.update();
THIS^.q_actualVelocity := THIS^.i_actualVelocity;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="standby" ObjectId="37665eeb-4a89-472b-b0a4-bd679754eca6">
              <interface>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                    <AccessModifiers Protected="true" />
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF isInitialised THEN
	SUPER^.standby();
ELSE
	initDrive();
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="initDrive" ObjectId="c8917508-812e-4a55-9bdd-a6551a8d8140">
              <interface />
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.q_controlWord.1 := TRUE;
THIS^.q_controlWord.2 := TRUE;
THIS^.q_controlWord.3 := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="disableDrive" ObjectId="978fcb05-bb8e-4c43-89a7-08a90f118881">
              <interface />
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.q_controlWord.1 := FALSE;
THIS^.q_controlWord.2 := FALSE;
THIS^.q_controlWord.3 := FALSE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="initial" ObjectId="9ee6524a-7511-4dda-937c-9f2bd81f4bd9">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                    <AccessModifiers Protected="true" />
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">disableDrive();
SUPER^.initial();</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
            <Property name="isError" ObjectId="3a5d3c00-b68d-4563-9a6a-2d4c9e445b1e">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <GetAccessor>
                <interface />
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">isError := THIS^.i_statusWord.3 OR THIS^.i_statusWord.7;</xhtml>
                  </ST>
                </body>
                <addData />
              </GetAccessor>
              <addData />
            </Property>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
            <Property name="isPowerOn" ObjectId="ff750294-6883-41b2-bd86-2b8573ee1354">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <GetAccessor>
                <interface />
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">isPowerOn := THIS^.i_statusWord.1;</xhtml>
                  </ST>
                </body>
                <addData />
              </GetAccessor>
              <addData />
            </Property>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
            <Property name="isSpindleStopped" ObjectId="91552020-df1d-446e-afe6-14b01971e929">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <GetAccessor>
                <interface />
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">isSpindleStopped := (THIS^.i_actualVelocity=0);</xhtml>
                  </ST>
                </body>
                <addData />
              </GetAccessor>
              <addData />
            </Property>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
            <Property name="isSpindleTargetReached" ObjectId="48213404-46b2-433e-91de-fce960d251f3">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <GetAccessor>
                <interface />
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">isSpindleTargetReached := (THIS^.i_actualVelocity&lt;&gt;0) AND THIS^.i_statusWord.10;</xhtml>
                  </ST>
                </body>
                <addData />
              </GetAccessor>
              <addData />
            </Property>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
            <Property name="isInitialised" ObjectId="4768171f-e64d-4cfe-ba22-ad69a51c1a40">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <GetAccessor>
                <interface />
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">isInitialised := THIS^.i_statusWord.0 AND THIS^.i_statusWord.4 AND THIS^.i_statusWord.5;</xhtml>
                  </ST>
                </body>
                <addData />
              </GetAccessor>
              <addData />
            </Property>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>b7590e5d-acd6-4c71-a2fd-808fdd3b94f6</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SpindleManager" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="i_runCW">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="i_runCCW">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="i_reset">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="i_targetVelocity">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Target rotating speed in RPM</xhtml>
              </documentation>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="q_actualVelocity">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Actual rotating speed in RPM</xhtml>
              </documentation>
            </variable>
            <variable name="q_error">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="q_spindleStopped">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Spindle is stopped and power stage is either ON or OFF</xhtml>
              </documentation>
            </variable>
            <variable name="q_spindleTargetReached">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Target rotating speed has been reached </xhtml>
              </documentation>
            </variable>
          </outputVars>
          <localVars>
            <variable name="status">
              <type>
                <derived name="SpindleMaganerStatus_e" />
              </type>
              <initialValue>
                <simpleValue value="9999" />
              </initialValue>
            </variable>
            <variable name="nextStatus">
              <type>
                <derived name="SpindleMaganerStatus_e" />
              </type>
              <initialValue>
                <simpleValue value="SpindleMaganerStatus_e.INIT" />
              </initialValue>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Implements>ErrorInterface</Implements>
                <Implements>RampsInterface</Implements>
                <Implements>MotionInterface</Implements>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Abstract class that represents general spindle. Spindle can be controlled via communication or analog signals - more precise implementation determines behaviour.
* Generally, spindle usage in CNC machines is rather simple and in most applications it is only simple starting and stopping of the spindle.
* This block represents this with spindle state machine, that could be - initialization, stadby, powered on, working - either CW or CCW, stopping or in error.
* Furthermore couple of interfaces are implemented to include certain functionality - such as error handling or ramps handling.
*
* Block also requires certain inputs - run CW or CCW, reset and target speed of spindle in RPM and on the other hands return output with actual velocity,
* error status, and spindle status (stopped or target reached). Additionally - actual velocity output does not have any implementation in abstract class, 
* since implementation might differ from spindle to spindle, yet the output is common to every spindle. Thus, developer have to implement it explicitly.
*
* Any other functionality (such as tool change positioning in more advanced spindles) or spindle behaviour can be achieved by extending this class.
*
* Override any class methods if implemented funcionality is too abstract or different behaviour is necessary.
</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">update(); //generally used for cyclic updating certain parameters - ie. ramps or status

CASE status OF
	SpindleMaganerStatus_e.INIT:
		initial(); //first cycles of the block or reset after error
	SpindleMaganerStatus_e.STANDBY:
		standby(); //drive has no error and is waiting ready for powering on
	SpindleMaganerStatus_e.POWER_ON:
		powerOn(); //drive is power and automatically goes into running state - either CW or CCW
	SpindleMaganerStatus_e.WORKING_CW:
		workingCW();
	SpindleMaganerStatus_e.WORKING_CCW:
		workingCCW();
	SpindleMaganerStatus_e.STOPPING:
		stopping();
	SpindleMaganerStatus_e.ERROR:
		error();
END_CASE</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="update" ObjectId="5d2ee713-bfab-40ed-b161-a1639940fe16">
              <interface>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                    <AccessModifiers Protected="true" />
                  </data>
                </addData>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Spindle manager abstract class method, handles updates of spindle manager. Updates status, ramps and outputs of this fb.
* Additionally, if error occurs - proceeds to error state
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//state machine status updates handling
THIS^.status := THIS^.nextStatus;

//error handling
IF NOT (status = SpindleMaganerStatus_e.INIT) THEN
	IF isError THEN
		nextStatus := SpindleMaganerStatus_e.ERROR;
	END_IF
END_IF;

//ramps updates if changed
IF rampsWasChanged() THEN
	writeRamps();
END_IF

//output handling
THIS^.q_error := isError;
THIS^.q_spindleStopped := isSpindleStopped;
THIS^.q_spindleTargetReached := isSpindleTargetReached;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="initial" ObjectId="1e08b61b-abe2-4793-b3b5-646210d45319">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                    <AccessModifiers Protected="true" />
                  </data>
                </addData>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Spindle manager abstact class method, handles initial state of spindle. If there are errors on the drives - the drive is reset and ramps are written.
* Spindle then proceeds to standby state. If no error is present - only ramps are written and the proceeds to standby state
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF isError THEN
	IF errorReset() THEN
		IF writeRamps() THEN
			THIS^.nextStatus := SpindleMaganerStatus_e.STANDBY;
		END_IF
	END_IF
ELSE
	IF writeRamps() THEN
		THIS^.nextStatus := SpindleMaganerStatus_e.STANDBY;
	END_IF
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="errorReset" ObjectId="1ae55ce3-8c7a-4577-8711-80fe5c21c301">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="writeRamps" ObjectId="87a71d40-fe71-4bd4-9cde-76e749e806a0">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">writeRamps := TRUE; //default implementation of the ramps for drives without ramps chaning or changing via drive parameters by service</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="rampsWasChanged" ObjectId="edec4948-06f6-46da-bd13-def5b80587ec">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">rampsWasChanged := FALSE; //default implementation of the ramps for drives without ramps chaning or changing via drive parameters by service</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="standby" ObjectId="cf5e6abb-7375-4c62-81bd-2e2c532eaefd">
              <interface>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                    <AccessModifiers Protected="true" />
                  </data>
                </addData>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Spindle manager abstact class method, handles spindle in standby state. Generally, spindle is idle - wating for runnign command. Then proceeds to power on status
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF THIS^.i_runCW OR THIS^.i_runCCW THEN
	THIS^.nextStatus := SpindleMaganerStatus_e.POWER_ON;
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="powerOn" ObjectId="4960ce04-7faa-4e86-b59f-1c22ab724dac">
              <interface>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                    <AccessModifiers Protected="true" />
                  </data>
                </addData>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Spindle manager abstract class method, handles spindle in power on status. If drive is not powered on - enables power.
* Otherwise, proceeds to next states, which are either - working in any direction or stopping if run command is no longer present.
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT isPowerOn THEN
	setPowerOn();
ELSE
	IF THIS^.i_runCW THEN
		nextStatus := SpindleMaganerStatus_e.WORKING_CW;
	ELSIF THIS^.i_runCCW THEN
		nextStatus := SpindleMaganerStatus_e.WORKING_CCW;
	ELSE
		nextStatus := SpindleMaganerStatus_e.STOPPING;
	END_IF
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="setPowerOn" ObjectId="f33f9a84-6c5d-4c7a-a720-0c5bf4ee03c5">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="workingCW" ObjectId="a264f533-5da2-400d-9ff7-a69e21dec496">
              <interface>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                    <AccessModifiers Protected="true" />
                  </data>
                </addData>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Spindle manager abstract class method, handles spindle in working in CW direction state. Enables the rotation with target velocity.
* If direction command changes, directly switches the state. IF no command is present - proceeds to stopping state
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">runSpindle(TO_INT(THIS^.i_targetVelocity));
IF NOT THIS^.i_runCW AND THIS^.i_runCCW THEN
	nextStatus := SpindleMaganerStatus_e.WORKING_CCW;
ELSIF NOT THIS^.i_runCW AND NOT THIS^.i_runCCW THEN
	nextStatus := SpindleMaganerStatus_e.STOPPING;
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="runSpindle" ObjectId="cdf85a93-5f3e-4c57-b0bb-c848ba83f6a7">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="i_setPosition">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="workingCCW" ObjectId="5060f027-aa83-4214-a54f-26ddaa02d075">
              <interface>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                    <AccessModifiers Protected="true" />
                  </data>
                </addData>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Spindle manager abstract class method, handles spindle in working in CW direction state. Enables the rotation with target velocity.
* Direction of rotating is handled by reversing target velocity command.
* If direction command changes, directly switches the state. IF no command is present - proceeds to stopping state
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">runSpindle(-TO_INT(THIS^.i_targetVelocity));
IF NOT THIS^.i_runCCW AND THIS^.i_runCW THEN
	nextStatus := SpindleMaganerStatus_e.WORKING_CW;
ELSIF NOT THIS^.i_runCW AND NOT THIS^.i_runCCW THEN
	nextStatus := SpindleMaganerStatus_e.STOPPING;
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="stopping" ObjectId="ba0a95e1-759d-49b5-a1a0-ee088639665c">
              <interface>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                    <AccessModifiers Protected="true" />
                  </data>
                </addData>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Spindla manager abstract class method, handles spindle in stopping state - disabels rotation of the spindle and when spindle is stopped, disables power stage
* If spindle power stage is disabled - proceeds to standby state
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT isSpindleStopped THEN
	stopSpindle();
ELSE
	setPowerOff();
END_IF

IF NOT isPowerOn THEN
	THIS^.nextStatus := SpindleMaganerStatus_e.STANDBY;
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="stopSpindle" ObjectId="82c4f027-6ef5-4850-aa9b-db6801779aee">
              <interface />
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="setPowerOff" ObjectId="91fe5ec3-6e5d-4ef8-a429-b0276da3c954">
              <interface />
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="error" ObjectId="5d780e70-6e86-4b1e-8859-0107a4695d76">
              <interface>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                    <AccessModifiers Protected="true" />
                  </data>
                </addData>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Spindle Manager abstract class method, that handles spindle in error state. Disables stop and power on commands and waits for reset to change to initial state
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF THIS^.i_reset THEN
	THIS^.nextStatus:= SpindleMaganerStatus_e.INIT;
END_IF
stopSpindle();
setPowerOff();
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
            <Property name="isError" ObjectId="77dd1dcd-8336-4c81-9ebf-fd7bb2da8a2c">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <GetAccessor>
                <interface />
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                  </ST>
                </body>
                <addData />
              </GetAccessor>
              <addData />
            </Property>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
            <Property name="isPowerOn" ObjectId="2edafe67-b101-46a5-ab95-0f4985b50ed0">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <GetAccessor>
                <interface />
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                  </ST>
                </body>
                <addData />
              </GetAccessor>
              <addData />
            </Property>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
            <Property name="isSpindleStopped" ObjectId="35877e76-f668-47e0-915c-00c3a243095b">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <GetAccessor>
                <interface />
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                  </ST>
                </body>
                <addData />
              </GetAccessor>
              <addData />
            </Property>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
            <Property name="isSpindleTargetReached" ObjectId="941ef15d-250d-4330-a823-13f893f40662">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <GetAccessor>
                <interface />
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                  </ST>
                </body>
                <addData />
              </GetAccessor>
              <addData />
            </Property>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5eceb01a-7a99-4ff8-8243-946296f72079</ObjectId>
          </data>
        </addData>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations />
  </instances>
  <addData>
    <data name="http://www.3s-software.com/plcopenxml/globalvars" handleUnknown="implementation">
      <globalVars name="Constants" constant="true">
        <variable name="DEFAULT_RAMP_TIME">
          <type>
            <REAL />
          </type>
          <initialValue>
            <simpleValue value="0.5" />
          </initialValue>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">default ramp time in seconds</xhtml>
          </documentation>
        </variable>
        <variable name="SP_DEFAULT_STATUS">
          <type>
            <derived name="SpindleMaganerStatus_e" />
          </type>
          <initialValue>
            <simpleValue value="SpindleMaganerStatus_e.DEFAULT" />
          </initialValue>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">default status of spindle state machine</xhtml>
          </documentation>
        </variable>
        <variable name="DEFAULT_MAX_VELOCITY">
          <type>
            <INT />
          </type>
          <initialValue>
            <simpleValue value="1500" />
          </initialValue>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">default max rotating speed of a spindle motor in RPM</xhtml>
          </documentation>
        </variable>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
            </Attributes>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>61a71296-3b39-4b4c-9e67-cea520fcd5cc</ObjectId>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'conditionalshow'}
{attribute 'conditionalshow' := 'SomeText'}
{attribute 'hide'}</xhtml>
        </documentation>
      </globalVars>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/interface" handleUnknown="implementation">
      <Interface name="ErrorInterface" ObjectId="7f29e168-bb89-495a-a3ae-8cb75aa464ff">
        <Methods>
          <Method name="errorReset" ObjectId="d1ceed18-4c4a-4176-a9e3-72527fe56f59">
            <interface>
              <returnType>
                <BOOL />
              </returnType>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Error interface methdo for reseting drive. If resets correctly TRUE is returned
</xhtml>
              </documentation>
            </interface>
            <addData />
          </Method>
        </Methods>
        <Properties>
          <Property name="isError" ObjectId="cfc6570e-66b3-4bbe-85b8-1479146c7cc5">
            <interface>
              <returnType>
                <BOOL />
              </returnType>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Error intefrace property - checks if drive is in error states and then returns TRUE
</xhtml>
              </documentation>
            </interface>
            <GetAccessor />
            <addData />
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Error intefrace property - checks if drive is in error states and then returns TRUE
</xhtml>
            </documentation>
          </Property>
        </Properties>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">
* An interface used for error handling of spindle drives. Allows for reading if drive is in error state and allows to reset the drive.
* ie. checks if controlword has error bit set
* 
* Extend if additional functionality needed - ie. warning codes decoding, etc.
</xhtml>
        </documentation>
        <addData />
      </Interface>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/interface" handleUnknown="implementation">
      <Interface name="MotionInterface" ObjectId="d287cc99-46c6-4f20-924e-f9b04710655a">
        <Methods>
          <Method name="setPowerOn" ObjectId="4811d434-1d4f-4743-b9d9-92c43ff86d0f">
            <interface>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Motion interface method, implementation allows to enable power stage of the drive
</xhtml>
              </documentation>
            </interface>
            <addData />
          </Method>
          <Method name="runSpindle" ObjectId="7e8c41a1-c12f-42e6-8b20-685de7878eae">
            <interface>
              <inputVars>
                <variable name="i_setVelocity">
                  <type>
                    <INT />
                  </type>
                </variable>
              </inputVars>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Motion interface method allows to run the spindle with set velocity.
* Set velocity is signed integer variable. Chaning rotation variable is executed by changing set velocity sign.
</xhtml>
              </documentation>
            </interface>
            <addData />
          </Method>
          <Method name="stopSpindle" ObjectId="1ddeeab4-2363-4c7d-9df7-40a2b8e8ce88">
            <interface>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Motion interface property, implementation allows to stop rotation of the drive - without disabling power stage.
</xhtml>
              </documentation>
            </interface>
            <addData />
          </Method>
          <Method name="setPowerOff" ObjectId="217dcb48-2cf4-43bc-adad-add58980105c">
            <interface>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Motion interface method implementation allows to disable power stage of the drive
</xhtml>
              </documentation>
            </interface>
            <addData />
          </Method>
        </Methods>
        <Properties>
          <Property name="isPowerOn" ObjectId="8fb89fcb-658b-4dec-ad0d-f9f73a07f2ff">
            <interface>
              <returnType>
                <BOOL />
              </returnType>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Motion interface property, implementation allows to check whether drive's power stage is enabled.
</xhtml>
              </documentation>
            </interface>
            <GetAccessor />
            <addData />
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Motion interface property, implementation allows to check whether drive's power stage is enabled.
</xhtml>
            </documentation>
          </Property>
          <Property name="isSpindleStopped" ObjectId="771cd78d-51bd-4f14-93af-3e72d3910bec">
            <interface>
              <returnType>
                <BOOL />
              </returnType>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Motion interface propert, implementation allows to check whether drive is stopped - either with or without power stage enabled
</xhtml>
              </documentation>
            </interface>
            <GetAccessor />
            <addData />
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Motion interface propert, implementation allows to check whether drive is stopped - either with or without power stage enabled
</xhtml>
            </documentation>
          </Property>
          <Property name="isSpindleTargetReached" ObjectId="fb56d40c-c306-4c30-89e1-e90c0b73fb13">
            <interface>
              <returnType>
                <BOOL />
              </returnType>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Motion interface property, implementation allows to check whtether target speed, set with runSpindle method, is already reached
</xhtml>
              </documentation>
            </interface>
            <GetAccessor />
            <addData />
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Motion interface property, implementation allows to check whtether target speed, set with runSpindle method, is already reached
</xhtml>
            </documentation>
          </Property>
        </Properties>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Motion interface allows for implementation motion related methods - ie. powering On or running the spindle. Implements also sets of motion state checks -
* - Power on status or target reached status.
</xhtml>
        </documentation>
        <addData />
      </Interface>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/interface" handleUnknown="implementation">
      <Interface name="RampsInterface" ObjectId="fbfe0586-384e-4a6c-a390-c3029cd16974">
        <Methods>
          <Method name="writeRamps" ObjectId="6f5efd40-77a4-48a1-99cb-1910e0a0a68a">
            <interface>
              <returnType>
                <BOOL />
              </returnType>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Ramps inteface method used for writing ramps to the drive. If written succesfully TRUE is returned.
</xhtml>
              </documentation>
            </interface>
            <addData />
          </Method>
          <Method name="rampsWasChanged" ObjectId="84bf83ba-8123-40d8-9c1d-7a44fe56d747">
            <interface>
              <returnType>
                <BOOL />
              </returnType>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">
* Ramps interface method for checking if actual ramps in the drive are different, than currently entered by user.
* If yes - TRUE is returned.
</xhtml>
              </documentation>
            </interface>
            <addData />
          </Method>
        </Methods>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">
* An interface for handling ramps in spindle drives. It is generally used for writing ramps via communication (EtherCAT, Modbus, etc.).
* Interface checks if ramps entered by user are different(method - rampsWasChanged), than actual in the drive. If yes - user defined ramps are written to the drive (method - writeRamps).
*
* If more functionality is necessary - extend this interface (ie. explicit ramps read to push to other functions)
</xhtml>
        </documentation>
        <addData />
      </Interface>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/libraries" handleUnknown="implementation">
      <Libraries>
        <Library Name="#CAA Types" Namespace="CAA" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="CAA Types Extern, * (CAA Technical Workgroup)" />
        <Library Name="#CAA FB Factory" Namespace="FBF" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="CAA FB Factory, * (CAA Technical Workgroup)" />
        <Library Name="#CBML" Namespace="CBML" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="Common Behaviour Model, * (3S - Smart Software Solutions GmbH)" />
        <Library Name="EtherCATStack, 3.5.16.0 (3S - Smart Software Solutions GmbH)" Namespace="ETCStack" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="IODrvEtherCATDriver, 3.5.16.0 (3S - Smart Software Solutions GmbH)" Namespace="IoDrvEthercatDriverLib" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false">
          <Parameters>
            <Parameter Name="ETC_MAX_SLAVES" Value="1024" />
            <Parameter Name="MAX_ASYNC_MSG" Value="4" />
            <Parameter Name="MAX_SDO_CHANNELS" Value="100" />
            <Parameter Name="MAX_MAILBOX_CHANNELS" Value="100" />
            <Parameter Name="MAX_STATUS_CYCLE_DELAY" Value="3" />
            <Parameter Name="ETC_FOE_TIMEOUT" Value="10000" />
          </Parameters>
        </Library>
        <Library Name="Standard, 3.5.15.0 (System)" Namespace="Standard" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>8c1463b5-02f2-427d-bd06-9e39d42fcbff</ObjectId>
          </data>
        </addData>
      </Libraries>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/projectstructure" handleUnknown="discard">
      <ProjectStructure>
        <Object Name="Library Manager" ObjectId="8c1463b5-02f2-427d-bd06-9e39d42fcbff" />
        <Folder Name="SpindleLibrary">
          <Folder Name="Enums">
            <Object Name="SpindleMaganerStatus_e" ObjectId="fdd32703-eb1d-4c4b-aa9b-533f668acbcb" />
          </Folder>
          <Folder Name="Function Blocks">
            <Object Name="SpindleManager" ObjectId="5eceb01a-7a99-4ff8-8243-946296f72079">
              <Folder Name="Status">
                <Object Name="update" ObjectId="5d2ee713-bfab-40ed-b161-a1639940fe16" />
                <Object Name="initial" ObjectId="1e08b61b-abe2-4793-b3b5-646210d45319" />
                <Object Name="standby" ObjectId="cf5e6abb-7375-4c62-81bd-2e2c532eaefd" />
                <Object Name="powerOn" ObjectId="4960ce04-7faa-4e86-b59f-1c22ab724dac" />
                <Object Name="workingCW" ObjectId="a264f533-5da2-400d-9ff7-a69e21dec496" />
                <Object Name="workingCCW" ObjectId="5060f027-aa83-4214-a54f-26ddaa02d075" />
                <Object Name="stopping" ObjectId="ba0a95e1-759d-49b5-a1a0-ee088639665c" />
                <Object Name="error" ObjectId="5d780e70-6e86-4b1e-8859-0107a4695d76" />
              </Folder>
              <Folder Name="ErrorInterface">
                <Object Name="isError" ObjectId="77dd1dcd-8336-4c81-9ebf-fd7bb2da8a2c" />
                <Object Name="errorReset" ObjectId="1ae55ce3-8c7a-4577-8711-80fe5c21c301" />
              </Folder>
              <Folder Name="RampsInterface">
                <Object Name="writeRamps" ObjectId="87a71d40-fe71-4bd4-9cde-76e749e806a0" />
                <Object Name="rampsWasChanged" ObjectId="edec4948-06f6-46da-bd13-def5b80587ec" />
              </Folder>
              <Folder Name="MotionInterface">
                <Object Name="isPowerOn" ObjectId="2edafe67-b101-46a5-ab95-0f4985b50ed0" />
                <Object Name="setPowerOn" ObjectId="f33f9a84-6c5d-4c7a-a720-0c5bf4ee03c5" />
                <Object Name="isSpindleStopped" ObjectId="35877e76-f668-47e0-915c-00c3a243095b" />
                <Object Name="isSpindleTargetReached" ObjectId="941ef15d-250d-4330-a823-13f893f40662" />
                <Object Name="runSpindle" ObjectId="cdf85a93-5f3e-4c57-b0bb-c848ba83f6a7" />
                <Object Name="stopSpindle" ObjectId="82c4f027-6ef5-4850-aa9b-db6801779aee" />
                <Object Name="setPowerOff" ObjectId="91fe5ec3-6e5d-4ef8-a429-b0276da3c954" />
              </Folder>
            </Object>
            <Object Name="AnalogSpindle" ObjectId="eb76969c-c174-4116-a74f-1f579b1c095f">
              <Folder Name="ErrorInterface">
                <Object Name="isError" ObjectId="91da8d3f-395f-407d-a40c-7c7ee066fe17" />
                <Object Name="errorReset" ObjectId="4c45ac57-8867-45ba-b93f-2cb214b4ff31" />
              </Folder>
              <Folder Name="MotionInterface">
                <Object Name="isPowerOn" ObjectId="256c28d3-fce5-4145-8014-8183b5b90b60" />
                <Object Name="isSpindleStopped" ObjectId="1f638665-ba1e-4c52-8d8f-f59eeb4a81e8" />
                <Object Name="isSpindleTargetReached" ObjectId="2e54a297-7a82-4ff6-8957-ba66aeebbcae" />
                <Object Name="setPowerOn" ObjectId="52300e2d-c6b4-4d24-b6f3-ec1a784af627" />
                <Object Name="runSpindle" ObjectId="aba2bb6a-d5d4-4ac4-ad0e-f0e5754b6af9" />
                <Object Name="stopSpindle" ObjectId="5c5a89c3-b037-4026-9ab5-ca7b4c2267a0" />
                <Object Name="setPowerOff" ObjectId="aa280ff4-0896-4edd-adf4-66b219bf2ef5" />
              </Folder>
              <Object Name="update" ObjectId="f0d9947b-4fbb-4cc4-a5c0-37bbcbdc6adf" />
            </Object>
            <Object Name="DeltaModbusSpindle" ObjectId="4b3835e6-75fc-4380-b373-2ae5a4dc52fa">
              <Folder Name="ErrorInterface">
                <Object Name="isError" ObjectId="3b762ad4-6799-4239-97c9-a0d8b929eccb" />
                <Object Name="errorReset" ObjectId="d7979cfb-c388-4f5e-8e98-047772426137" />
              </Folder>
              <Folder Name="RampsInterface">
                <Object Name="writeRamps" ObjectId="46c0ac0a-6452-4fbd-b44f-da1af849b7ae" />
                <Object Name="rampsWasChanged" ObjectId="069f48b2-1ec5-4c8e-8ef1-c6cefc8ebd0a" />
              </Folder>
              <Folder Name="MotionInterface">
                <Object Name="isPowerOn" ObjectId="70ae6658-2548-41fd-bbac-84f8c4cf4b7a" />
                <Object Name="isSpindleStopped" ObjectId="8504e3c4-8d9a-4140-8793-aa64cf83ba55" />
                <Object Name="isSpindleTargetReached" ObjectId="edacb644-5f10-4fe2-a4cc-0c5f296acdb8" />
                <Object Name="setPowerOn" ObjectId="0f8a25f2-8955-4e1d-8197-ba258f7af758" />
                <Object Name="runSpindle" ObjectId="a587d9a3-d206-409c-9ff5-d32d8c4aa1b1" />
                <Object Name="stopSpindle" ObjectId="6591b9e4-b6d9-4b1c-aaab-ee24b3f5ca8e" />
                <Object Name="setPowerOff" ObjectId="99904ff6-347a-4397-bda8-33c8cd0184a3" />
              </Folder>
              <Object Name="update" ObjectId="b91aa904-44c4-4671-b23d-285d02b81b35" />
            </Object>
            <Object Name="EthercatSpindle" ObjectId="b7590e5d-acd6-4c71-a2fd-808fdd3b94f6">
              <Folder Name="ErrorInterface">
                <Object Name="isError" ObjectId="3a5d3c00-b68d-4563-9a6a-2d4c9e445b1e" />
                <Object Name="errorReset" ObjectId="aaa21ad0-ef17-40c0-bde6-9103ccb7360b" />
              </Folder>
              <Folder Name="RampsInterface">
                <Object Name="writeRamps" ObjectId="b17786e6-4f82-4deb-a282-1f13cd1af3f8" />
                <Object Name="rampsWasChanged" ObjectId="3e8f1ea3-df92-4f8a-a87f-c24eb145e9a2" />
              </Folder>
              <Folder Name="MotionInterface">
                <Object Name="isPowerOn" ObjectId="ff750294-6883-41b2-bd86-2b8573ee1354" />
                <Object Name="isSpindleStopped" ObjectId="91552020-df1d-446e-afe6-14b01971e929" />
                <Object Name="isSpindleTargetReached" ObjectId="48213404-46b2-433e-91de-fce960d251f3" />
                <Object Name="setPowerOn" ObjectId="529b81be-4975-444e-8fe8-07985fd3e0f7" />
                <Object Name="runSpindle" ObjectId="a7050d44-24da-48af-8bf4-a94604df645c" />
                <Object Name="stopSpindle" ObjectId="b958b4c8-bdff-49e3-af12-9f55c52c404a" />
                <Object Name="setPowerOff" ObjectId="d7ad8290-07d4-4953-b7ec-99f6326f0330" />
                <Object Name="initDrive" ObjectId="c8917508-812e-4a55-9bdd-a6551a8d8140" />
                <Object Name="isInitialised" ObjectId="4768171f-e64d-4cfe-ba22-ad69a51c1a40" />
                <Object Name="disableDrive" ObjectId="978fcb05-bb8e-4c43-89a7-08a90f118881" />
              </Folder>
              <Folder Name="Status">
                <Object Name="update" ObjectId="d957cbb8-a86d-4d34-93fd-ab1f042e0989" />
                <Object Name="standby" ObjectId="37665eeb-4a89-472b-b0a4-bd679754eca6" />
                <Object Name="initial" ObjectId="9ee6524a-7511-4dda-937c-9f2bd81f4bd9" />
              </Folder>
            </Object>
          </Folder>
          <Folder Name="GlobalConstants">
            <Object Name="Constants" ObjectId="61a71296-3b39-4b4c-9e67-cea520fcd5cc" />
          </Folder>
          <Folder Name="Interfaces">
            <Object Name="ErrorInterface" ObjectId="7f29e168-bb89-495a-a3ae-8cb75aa464ff">
              <Object Name="errorReset" ObjectId="d1ceed18-4c4a-4176-a9e3-72527fe56f59" />
              <Object Name="isError" ObjectId="cfc6570e-66b3-4bbe-85b8-1479146c7cc5" />
            </Object>
            <Object Name="RampsInterface" ObjectId="fbfe0586-384e-4a6c-a390-c3029cd16974">
              <Object Name="writeRamps" ObjectId="6f5efd40-77a4-48a1-99cb-1910e0a0a68a" />
              <Object Name="rampsWasChanged" ObjectId="84bf83ba-8123-40d8-9c1d-7a44fe56d747" />
            </Object>
            <Object Name="MotionInterface" ObjectId="d287cc99-46c6-4f20-924e-f9b04710655a">
              <Object Name="setPowerOn" ObjectId="4811d434-1d4f-4743-b9d9-92c43ff86d0f" />
              <Object Name="isPowerOn" ObjectId="8fb89fcb-658b-4dec-ad0d-f9f73a07f2ff" />
              <Object Name="isSpindleStopped" ObjectId="771cd78d-51bd-4f14-93af-3e72d3910bec" />
              <Object Name="isSpindleTargetReached" ObjectId="fb56d40c-c306-4c30-89e1-e90c0b73fb13" />
              <Object Name="runSpindle" ObjectId="7e8c41a1-c12f-42e6-8b20-685de7878eae" />
              <Object Name="stopSpindle" ObjectId="1ddeeab4-2363-4c7d-9df7-40a2b8e8ce88" />
              <Object Name="setPowerOff" ObjectId="217dcb48-2cf4-43bc-adad-add58980105c" />
            </Object>
          </Folder>
        </Folder>
        <Object Name="Project Information" ObjectId="11c0fc3a-9bcf-4dd8-ac38-efb93363e521" />
      </ProjectStructure>
    </data>
  </addData>
</project>